#!/usr/bin/env python3
# vim:set et sw=4 ts=4 sts=4 tw=72:
# Evan Wilde (c) 2018

import argparse
import shutil
import sys
import os


# Exceptions

class IncorrectFileError(Exception):
    def __init__(self, fname, expected_name):
        self.name = os.path.basename(expected_name)
        self.input_name = os.path.basename(fname)


# Argument actions

class MakePathAbsolute(argparse.Action):
    """
    Convert filepaths to absolute filepaths
    """
    def __call__(self, parser, args, values, option_string=None):
        setattr(args, self.dest, os.path.abspath(values))


# Functions


def copy_files(f, t):
    """
    Copy all files and directories in f to the t dir

    :f: (from) source file/directory
    :t: (to) destination file/directory
    """
    if not os.path.exists(t):
        os.mkdir(t)
    [shutil.copy(os.path.join(f, p), t)
     if os.path.isfile(os.path.join(f, p))
     else shutil.copytree(os.path.join(f, p), os.path.join(t, p))
     for p in os.listdir(f)]


def move_files(f, t):
    """
    Move all files and directories in f to the t dir

    :f: (from) source file/directory
    :t: (to) destination file/directory
    """
    shutil.move(f, t)


def get_cache_name(fname):
    """
    Gets the name of the cache if it exists, otherwise will throw an
    error

    :fname: Could be the build directory, or the name of a file
    :returns: The absolute path to the CMakeCache
    """
    if os.path.isdir(fname):
        fname = os.path.abspath(fname + '/CMakeCache.txt')
        if not os.path.exists(fname):
            raise FileNotFoundError(fname)
    if os.path.basename(fname) != 'CMakeCache.txt':
        raise IncorrectFileError(fname, 'CMakeCache.txt')
    return fname


def change_base_dir(olddirname, newdirname, lines):
    """
    Replace the old directory with the new directory

    :olddirname: Original build directory name
    :newdirname: New build directory name
    :lines: The input lines
    :returns: The fixed lines
    """
    for line in lines:
        if olddirname in line:
            line = line.replace(olddirname, newdirname)
        yield line


# Main programs

def move_main():
    ap = argparse.ArgumentParser()
    ap.add_argument("SOURCE", action=MakePathAbsolute)
    ap.add_argument("DESTINATION", action=MakePathAbsolute)
    args = ap.parse_args()
    print("Moving build directory", args)

    try:
        fname = get_cache_name(args.SOURCE)
    except IncorrectFileError as e:
        print('Error: Incorrect file passed' +
              f'"{os.path.basename(e.input_name)}" expected "{e.name}"',
              file=sys.stderr)
        return 1
    except FileNotFoundError as e:
        print("Error: File not found", e, file=sys.stderr)
        return 1

    build_dirname = os.path.dirname(fname)
    # Fix the CMakeCache file
    with open(fname, 'r') as f:
        lines = change_base_dir(build_dirname,
                                args.DESTINATION,
                                (line.rstrip() for line in f))
        move_files(build_dirname, args.DESTINATION)
        dst_cache = os.path.join(args.DESTINATION, 'CMakeCache.txt')
        with open(dst_cache, 'w') as out_f:
            out_f.write('\n'.join(lines))
    return 0


def copy_main():
    ap = argparse.ArgumentParser()
    ap.add_argument("SOURCE", action=MakePathAbsolute)
    ap.add_argument("DESTINATION", action=MakePathAbsolute)
    args = ap.parse_args()

    print("Copying build directory")

    try:
        fname = get_cache_name(args.SOURCE)
    except IncorrectFileError as e:
        print('Error: Incorrect file passed' +
              f'"{os.path.basename(e.input_name)}" expected "{e.name}"',
              file=sys.stderr)
        return 1
    except FileNotFoundError as e:
        print("Error: File not found", e, file=sys.stderr)
        return 1

    build_dirname = os.path.dirname(fname)

    copy_files(build_dirname, args.DESTINATION)

    # Fix the CMakeCache file
    with open(fname, 'r') as f:
        lines = change_base_dir(build_dirname,
                                args.DESTINATION,
                                (line.rstrip() for line in f))

        dst_cache = os.path.join(args.DESTINATION, 'CMakeCache.txt')

        with open(dst_cache, 'w') as out_f:
            out_f.write('\n'.join(lines))
    return 0


programs = {"cmake-cp": copy_main,
            "cmake-mv": move_main}

scriptname = os.path.basename(__file__)
if scriptname not in programs:
    print("Must call a valid helper script [" +
          ", ".join(programs.keys()) + ']', file=sys.stderr)
    sys.exit(1)

sys.exit(programs[scriptname]())
